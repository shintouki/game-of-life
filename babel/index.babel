var RunButton = React.createClass({
  handleRunButtonClick: function() {
    this.props.runButtonClicked();
  },
  
  render: function () {
    return (
      <input
        type="button"
        value="Run"
        disabled={this.props.runButtonDisabled}
        onClick={this.handleRunButtonClick} />
    );
  }
});

var PauseButton = React.createClass({
  handlePauseButtonClick: function() {
    this.props.pauseButtonClicked();
  },
  
  render: function () {
    return (
      <input 
        type="button"
        value="Pause"
        onClick={this.handlePauseButtonClick} />
    );
  }
});

var ClearButton = React.createClass({
  handleClearButtonClick: function() {
    this.props.clearButtonClicked();
  },
  
  render: function () {
    return (
      <input
        type="button"
        value="Clear"
        onClick={this.handleClearButtonClick} />
    );
  }
});

var NextButton = React.createClass({
  handleNextButtonClick: function () {
    this.props.nextButtonClicked();
  },
  
  render: function () {
    return (
      <input
        type="button"
        value="Next"
        onClick={this.handleNextButtonClick} />
    );
  }
});

var GenerationCounter = React.createClass({
  render: function () {
    var generationNum = this.props.generation;
    
    return (
      <p>Generation: {generationNum}</p>
    );
  }
});

var TopButtons = React.createClass({
  render: function () {
    return (
      <div>
        <RunButton 
          runButtonClicked={this.props.runButtonClicked}
          runButtonDisabled={this.props.runButtonDisabled} />
        <PauseButton 
          pauseButtonClicked={this.props.pauseButtonClicked} />
        <ClearButton 
          clearButtonClicked={this.props.clearButtonClicked} />
        <NextButton 
          nextButtonClicked={this.props.nextButtonClicked} />
        <GenerationCounter 
          generation={this.props.generation} />
      </div>
    );
  }
});

var SingleCell = React.createClass({
  handleCellClick: function () {
    this.props.cellClicked(this.props.rowNum, this.props.colNum);
  },
  
  render: function () {
    var cellStatus = this.props.cellStatusIndivCell;
    
    return (
      <input
        className={cellStatus}
        type="button"
        onClick={this.handleCellClick} />
    );
  }
});

var CellRow = React.createClass({
  render: function () {
    var numCols = this.props.numCols;
    var singleRow = [];
    for (let i=0; i<numCols; i++) {
      // console.log(i + ": " + this.props.cellStatus);
      var cellStatusIndivCell = this.props.cellStatusRow[i];
      singleRow.push(
        <SingleCell
          cellClicked={this.props.cellClicked}
          cellStatusIndivCell={cellStatusIndivCell}
          // cellType={this.props.cellType}
          rowNum={this.props.rowNum}
          colNum={i}
          key={"singlecell" + i} />
      );
    }
    
    return (
      <div className="cellRow">
          {singleRow}
      </div>
    );
  }
});

var GameScreen = React.createClass({
  
  render: function () {
    var numRows = this.props.numRows;
    var multipleRows = [];
    // console.log(numRows);
    for (let i=0; i<numRows; i++) {
      var cellStatusRow = this.props.cellStatus[i];
    
      multipleRows.push(
        <CellRow
          cellClicked={this.props.cellClicked}
          cellStatusRow={cellStatusRow}
          numCols={this.props.numCols}
          rowNum={i}
          key={"cellrow" + i} />
      );
    }
    
    return (
      <div id="gameScreen">
        {multipleRows}
      </div>
    );
  }
});

var SizeSmallButton = React.createClass({
  
  handleSmallScreenButton: function () {
    this.props.smallScreenButtonClicked();
  },
  
  render: function () {
    return (
      <input
        type="button"
        value="Small"
        onClick={this.handleSmallScreenButton} />
    );
  }
});

var SizeMedButton = React.createClass({
  
  handleMedScreenButton: function () {
    this.props.medScreenButtonClicked();
  },
  
  render: function () {
    return (
      <input 
        type="button"
        value="Medium"
        onClick={this.handleMedScreenButton} />
    );
  }
});

var SizeLargeButton = React.createClass({
  
  handleLargeScreenButton: function () {
    this.props.largeScreenButtonClicked();
  },
  
  render: function () {
    return (
      <input
        type="button"
        value="Large"
        onClick={this.handleLargeScreenButton} />
    );
  }
});

var SizeButtons = React.createClass({
  render: function () {
    return (
      <div>
        <p>Size:</p>
        <SizeSmallButton
          smallScreenButtonClicked={this.props.smallScreenButtonClicked} />
        <SizeMedButton
          medScreenButtonClicked={this.props.medScreenButtonClicked} />
        <SizeLargeButton
          largeScreenButtonClicked={this.props.largeScreenButtonClicked} />
      </div>
    );
  }
});

var SpeedSlowButton = React.createClass({
  handleSlowSpeedButtonClick: function () {
    this.props.slowSpeedButtonClicked();
  },
  
  render: function () {
    return (
      <input
        type="button"
        value="Slow"
        onClick={this.handleSlowSpeedButtonClick} />
    );
  }
});

var SpeedMedButton = React.createClass({
  handleMedSpeedButtonClick: function () {
    this.props.medSpeedButtonClicked();
  },
  
  render: function () {
    return (
      <input 
        type="button"
        value="Medium"
        onClick={this.handleMedSpeedButtonClick} />
    );
  }
});

var SpeedFastButton = React.createClass({
  handleFastSpeedButtonClick: function () {
    this.props.fastSpeedButtonClicked();
  },
  
  render: function () {
    return (
      <input
        type="button"
        value="Fast"
        onClick={this.handleFastSpeedButtonClick} />
    );
  }
});

var SpeedButtons = React.createClass({
  render: function () {
    return (
      <div>
        <p>Speed:</p>
        <SpeedSlowButton 
          slowSpeedButtonClicked={this.props.slowSpeedButtonClicked} />
        <SpeedMedButton 
          medSpeedButtonClicked={this.props.medSpeedButtonClicked} />
        <SpeedFastButton 
          fastSpeedButtonClicked={this.props.fastSpeedButtonClicked} />
      </div>
    );
  }
});

var ButtonButtons = React.createClass({
  render: function () {
    return (
      <div>
        <SizeButtons 
          smallScreenButtonClicked={this.props.smallScreenButtonClicked}
          medScreenButtonClicked={this.props.medScreenButtonClicked}
          largeScreenButtonClicked={this.props.largeScreenButtonClicked} />
        <SpeedButtons 
          slowSpeedButtonClicked={this.props.slowSpeedButtonClicked}
          medSpeedButtonClicked={this.props.medSpeedButtonClicked}
          fastSpeedButtonClicked={this.props.fastSpeedButtonClicked} />
      </div>
    );
  }
});

var FullApp = React.createClass({
  smallSize: [20, 30],
  medSize: [40, 60],
  largeSize: [50, 80],
  slowSpeed: 1000,
  medSpeed: 500,
  fastSpeed: 100,
  
  getInitialState: function() {
    
    let cellStatusArr = this.randomCellStatusArr(this.medSize, this.medSize);
    
    return {
      numRows: this.medSize,
      numCols: this.medSize,
      speed: this.fastSpeed,
      cellStatus: cellStatusArr,
      generation: 0,
      interval: "",
      runButtonDisabled: false
    };
  },
  
  componentWillMount: function() {

  },
  
  componentWillUnmount: function() {
    
  },
  
  initCellStatusArr: function(numRow, numCol) {
    let cellStatusArr = [];
      for (let i=0; i<numRow; i++) {
        let row = [];
        for (let j=0; j<numCol; j++) {
          row.push("dead");
        }
        cellStatusArr.push(row);
      }
    return cellStatusArr;
  },
  
  randomCellStatusArr: function(numRow, numCol) {
    let cellStatusArr = [];
      for (let i=0; i<numRow; i++) {
        let row = [];
        for (let j=0; j<numCol; j++) {
          let zeroOrOne = Math.round(Math.random());
          if (zeroOrOne === 1) {
            row.push("alive");
          }
          else {
            row.push("dead");
          }
        }
        cellStatusArr.push(row);
      }
    return cellStatusArr;
  },
  
  runButtonClicked: function() {
    var goToNextGen = this.goToNextGeneration;
    var nextGenInterval = setInterval(function() {
      goToNextGen();
    }, this.state.speed);
    
    this.setState({
      interval: nextGenInterval,
      runButtonDisabled: true
    });
  },
  
  pauseButtonClicked: function() {
    clearInterval(this.state.interval);
    
    this.setState({
      interval: "",
      runButtonDisabled: false
    });
  },
  
  clearButtonClicked: function() {
    var cellStatusArr = this.initCellStatusArr(this.state.numRows, this.state.numCols);
    clearInterval(this.state.interval);
    
    this.setState({
      cellStatus: cellStatusArr,
      generation: 0,
      interval: "",
      runButtonDisabled: false
    });
  },
  
  numLiveNeighbors: function(row, col, cellStatusCopy) {
    let numLive = 0;
    // console.log("checking..." + " row: " + row + " col: " + col);
    if (row - 1 >= 0) {
      if (cellStatusCopy[row-1][col] === "alive") {
        // console.log("alive: " + " row: " + (row-1) + " col: " + col);
        numLive++;
      }
    }
    if (col - 1 >= 0) {
      if (cellStatusCopy[row][col-1] === "alive") {
        // console.log("alive: " + " row: " + row + " col: " + (col-1));
        numLive++;
      }
    }
    if (row - 1 >= 0 && col - 1 >= 0) {
      if (cellStatusCopy[row-1][col-1] === "alive") {
        // console.log("alive: " + " row: " + row-1 + " col: " + (col-1));
        numLive++;
      }
    }
    if (row + 1 < this.state.numRows) {
      if (cellStatusCopy[row+1][col] === "alive") {
        // console.log("alive: " + " row: " + (row+1) + " col: " + col);
        numLive++;
      }
    }
    if (col + 1 < this.state.numCols) {
      if (cellStatusCopy[row][col+1] === "alive") {
        // console.log("alive: " + " row: " + row + " col: " + (col+1));
        numLive++;
      }
    }
    if (row + 1 < this.state.numRows && col + 1 < this.state.numCols) {
      if (cellStatusCopy[row+1][col+1] === "alive") {
        // console.log("alive: " + " row: " + (row+1) + " col: " + (col+1));
        numLive++;
      }
    }
    if (row - 1 >= 0 && col + 1 < this.state.numCols) {
      if (cellStatusCopy[row-1][col+1] === "alive") {
        // console.log("alive: " + " row: " + (row-1) + " col: " + (col+1));
        numLive++;
      }
    }
    if (row + 1 < this.state.numRows && col - 1 >= 0) {
      if (cellStatusCopy[row+1][col-1] === "alive") {
        // console.log("alive: " + " row: " + (row+1) + " col: " + (col-1));
        numLive++;
      }
    }
    return numLive;
  },
  
  // Cell is alive, so check current cell and all neighbhors
  checkNeighbors: function(row, col, cellStatusNew, cellStatusCopy) {
    // Check if current cell should die
    let numLiveNeighbors = this.numLiveNeighbors(row, col, cellStatusCopy);
    if (numLiveNeighbors < 2 ||  numLiveNeighbors > 3) {
      cellStatusNew[row][col] = "dead";
    }
    
    // Check if neighboring cells should be born
    if (row - 1 >= 0) {
      if (cellStatusCopy[row-1][col] === "dead") {
        numLiveNeighbors = this.numLiveNeighbors(row-1, col, cellStatusCopy);
        if (numLiveNeighbors === 3) {
          cellStatusNew[row-1][col] = "alive";
        }
      }
    }
    
    if (col - 1 >= 0) {
      if (cellStatusCopy[row][col-1] === "dead") {
        numLiveNeighbors = this.numLiveNeighbors(row, col-1, cellStatusCopy);
        if (numLiveNeighbors === 3) {
          cellStatusNew[row][col-1] = "alive";
        }
      }
    }
    if (row - 1 >= 0 && col - 1 >= 0) {
      if (cellStatusCopy[row-1][col-1] === "dead") {
        numLiveNeighbors = this.numLiveNeighbors(row-1, col-1, cellStatusCopy);
        if (numLiveNeighbors === 3) {
          cellStatusNew[row-1][col-1] = "alive";
        }
      }
    }
    
    if (row + 1 < this.state.numRows) {
      if (cellStatusCopy[row+1][col] === "dead") {
        numLiveNeighbors = this.numLiveNeighbors(row+1, col, cellStatusCopy);
        if (numLiveNeighbors === 3) {
          cellStatusNew[row+1][col] = "alive";
        }
      }
    }
    
    if (col + 1 < this.state.numCols) {
      if (cellStatusCopy[row][col+1] === "dead") {
        numLiveNeighbors = this.numLiveNeighbors(row, col+1, cellStatusCopy);
        if (numLiveNeighbors === 3) {
          cellStatusNew[row][col+1] = "alive";
        }
      }
    }
    
    if (row + 1 < this.state.numRows && col + 1 < this.state.numCols) {
      if (cellStatusCopy[row+1][col+1] === "dead") {
        numLiveNeighbors = this.numLiveNeighbors(row+1, col+1, cellStatusCopy);
        if (numLiveNeighbors === 3) {
          cellStatusNew[row+1][col+1] = "alive";
        }
      }
    }
    if (row - 1 >= 0 && col + 1 < this.state.numCols) {
      if (cellStatusCopy[row-1][col+1] === "dead") {
        numLiveNeighbors = this.numLiveNeighbors(row-1, col+1, cellStatusCopy);
        if (numLiveNeighbors === 3) {
          cellStatusNew[row-1][col+1] = "alive";
        }
      }
    }
    if (row + 1 < this.state.numRows && col - 1 >= 0) {
      if (cellStatusCopy[row+1][col-1] === "dead") {
        numLiveNeighbors = this.numLiveNeighbors(row+1, col-1, cellStatusCopy);
        if (numLiveNeighbors === 3) {
          cellStatusNew[row+1][col-1] = "alive";
        }
      }
    }
    
    
  },
  
  goToNextGeneration: function() {
    
    // cellStatusNew will change, cellStatusCopy will not change.
    // Use JSON.parse and JSON.stringify to make deep copy (clone)
    let cellStatusCopy = JSON.parse(JSON.stringify(this.state.cellStatus));
    let cellStatusNew = JSON.parse(JSON.stringify(this.state.cellStatus));
    
    for (let row=0; row<this.state.numRows; row++) {
      for (let col=0; col<this.state.numCols; col++) {
        if (cellStatusCopy[row][col] === "alive") {
          this.checkNeighbors(row, col, cellStatusNew, cellStatusCopy);
        }
      }
    }
    
    var gen = this.state.generation + 1;
    
    this.setState({
      cellStatus: cellStatusNew,
      generation: gen
    })
  },
  
  nextButtonClicked: function() {
    this.goToNextGeneration();
  },
  
  cellClicked: function(row, col) {
    var cellStatusArr = this.state.cellStatus;
    if (cellStatusArr[row][col] === "dead") {
      cellStatusArr[row][col] = "alive"
    }
    else if (cellStatusArr[row][col] === "alive") {
      cellStatusArr[row][col] = "dead"
    }
    
    this.setState({
      cellStatus: cellStatusArr,
    });
  },
  
  smallScreenButtonClicked: function() {
    let cellStatusArr = this.initCellStatusArr(this.smallSize[0], this.smallSize[1]);
    clearInterval(this.state.interval);
    
    this.setState({
      numRows: this.smallSize[0],
      numCols: this.smallSize[1],
      cellStatus: cellStatusArr,
      interval: "",
      generation: 0,
      runButtonDisabled: false
    });
  },
  
  medScreenButtonClicked: function() {
    let cellStatusArr = this.initCellStatusArr(this.medSize[0], this.medSize[1]);
    clearInterval(this.state.interval);
    
    this.setState({
      numRows: this.medSize[0],
      numCols: this.medSize[1],
      cellStatus: cellStatusArr,
      interval: "",
      generation: 0,
      runButtonDisabled: false
    });
  },
  
  largeScreenButtonClicked: function() {
    let cellStatusArr = this.initCellStatusArr(this.largeSize[0], this.largeSize[1]);
    clearInterval(this.state.interval);
    
    this.setState({
      numRows: this.largeSize[0],
      numCols: this.largeSize[1],
      cellStatus: cellStatusArr,
      interval: "",
      generation: 0,
      runButtonDisabled: false
    });
  },
  
  slowSpeedButtonClicked: function() {
    clearInterval(this.state.interval);
    
    var goToNextGen = this.goToNextGeneration;
    var nextGenInterval = setInterval(function() {
      goToNextGen();
    }, this.slowSpeed);
    
    this.setState({
      speed: this.slowSpeed,
      interval: nextGenInterval,
    });
  },
  
  medSpeedButtonClicked: function() {
    clearInterval(this.state.interval);
    
    var goToNextGen = this.goToNextGeneration;
    var nextGenInterval = setInterval(function() {
      goToNextGen();
    }, this.medSpeed);
    
    this.setState({
      speed: this.medSpeed,
      interval: nextGenInterval,
    });
  },
  
  fastSpeedButtonClicked: function() {
    clearInterval(this.state.interval);
    
    var goToNextGen = this.goToNextGeneration;
    var nextGenInterval = setInterval(function() {
      goToNextGen();
    }, this.fastSpeed);
    
    this.setState({
      speed: this.fastSpeed,
      interval: nextGenInterval,
    });
  },
  
  render: function () {
    return (
      <div id="fullApp">
        <TopButtons
          runButtonClicked={this.runButtonClicked}
          runButtonDisabled={this.state.runButtonDisabled}
          pauseButtonClicked={this.pauseButtonClicked}
          clearButtonClicked={this.clearButtonClicked}
          nextButtonClicked={this.nextButtonClicked}
          generation={this.state.generation} />
        <GameScreen
          numRows={this.state.numRows} 
          numCols={this.state.numCols}
          cellClicked={this.cellClicked}
          cellStatus={this.state.cellStatus} />
        <ButtonButtons
          smallScreenButtonClicked={this.smallScreenButtonClicked}
          medScreenButtonClicked={this.medScreenButtonClicked}
          largeScreenButtonClicked={this.largeScreenButtonClicked}
          slowSpeedButtonClicked={this.slowSpeedButtonClicked}
          medSpeedButtonClicked={this.medSpeedButtonClicked}
          fastSpeedButtonClicked={this.fastSpeedButtonClicked} />
      </div>
    );
  }
  
});

ReactDOM.render(
  <FullApp />,
  document.getElementById('app')
);